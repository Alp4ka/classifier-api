// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: server.proto

package classifier_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GWManagerService_AcquireSession_FullMethodName = "/api.GWManagerService/AcquireSession"
	GWManagerService_ReleaseSession_FullMethodName = "/api.GWManagerService/ReleaseSession"
	GWManagerService_Process_FullMethodName        = "/api.GWManagerService/Process"
)

// GWManagerServiceClient is the client API for GWManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GWManagerServiceClient interface {
	AcquireSession(ctx context.Context, in *AcquireSessionRequest, opts ...grpc.CallOption) (*AcquireSessionResponse, error)
	ReleaseSession(ctx context.Context, in *ReleaseSessionRequest, opts ...grpc.CallOption) (*ReleaseSessionResponse, error)
	Process(ctx context.Context, opts ...grpc.CallOption) (GWManagerService_ProcessClient, error)
}

type gWManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGWManagerServiceClient(cc grpc.ClientConnInterface) GWManagerServiceClient {
	return &gWManagerServiceClient{cc}
}

func (c *gWManagerServiceClient) AcquireSession(ctx context.Context, in *AcquireSessionRequest, opts ...grpc.CallOption) (*AcquireSessionResponse, error) {
	out := new(AcquireSessionResponse)
	err := c.cc.Invoke(ctx, GWManagerService_AcquireSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gWManagerServiceClient) ReleaseSession(ctx context.Context, in *ReleaseSessionRequest, opts ...grpc.CallOption) (*ReleaseSessionResponse, error) {
	out := new(ReleaseSessionResponse)
	err := c.cc.Invoke(ctx, GWManagerService_ReleaseSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gWManagerServiceClient) Process(ctx context.Context, opts ...grpc.CallOption) (GWManagerService_ProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &GWManagerService_ServiceDesc.Streams[0], GWManagerService_Process_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gWManagerServiceProcessClient{stream}
	return x, nil
}

type GWManagerService_ProcessClient interface {
	Send(*ProcessRequest) error
	Recv() (*ProcessResponse, error)
	grpc.ClientStream
}

type gWManagerServiceProcessClient struct {
	grpc.ClientStream
}

func (x *gWManagerServiceProcessClient) Send(m *ProcessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gWManagerServiceProcessClient) Recv() (*ProcessResponse, error) {
	m := new(ProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GWManagerServiceServer is the server API for GWManagerService service.
// All implementations must embed UnimplementedGWManagerServiceServer
// for forward compatibility
type GWManagerServiceServer interface {
	AcquireSession(context.Context, *AcquireSessionRequest) (*AcquireSessionResponse, error)
	ReleaseSession(context.Context, *ReleaseSessionRequest) (*ReleaseSessionResponse, error)
	Process(GWManagerService_ProcessServer) error
	mustEmbedUnimplementedGWManagerServiceServer()
}

// UnimplementedGWManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGWManagerServiceServer struct {
}

func (UnimplementedGWManagerServiceServer) AcquireSession(context.Context, *AcquireSessionRequest) (*AcquireSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireSession not implemented")
}
func (UnimplementedGWManagerServiceServer) ReleaseSession(context.Context, *ReleaseSessionRequest) (*ReleaseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSession not implemented")
}
func (UnimplementedGWManagerServiceServer) Process(GWManagerService_ProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedGWManagerServiceServer) mustEmbedUnimplementedGWManagerServiceServer() {}

// UnsafeGWManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GWManagerServiceServer will
// result in compilation errors.
type UnsafeGWManagerServiceServer interface {
	mustEmbedUnimplementedGWManagerServiceServer()
}

func RegisterGWManagerServiceServer(s grpc.ServiceRegistrar, srv GWManagerServiceServer) {
	s.RegisterService(&GWManagerService_ServiceDesc, srv)
}

func _GWManagerService_AcquireSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GWManagerServiceServer).AcquireSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GWManagerService_AcquireSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GWManagerServiceServer).AcquireSession(ctx, req.(*AcquireSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GWManagerService_ReleaseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GWManagerServiceServer).ReleaseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GWManagerService_ReleaseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GWManagerServiceServer).ReleaseSession(ctx, req.(*ReleaseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GWManagerService_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GWManagerServiceServer).Process(&gWManagerServiceProcessServer{stream})
}

type GWManagerService_ProcessServer interface {
	Send(*ProcessResponse) error
	Recv() (*ProcessRequest, error)
	grpc.ServerStream
}

type gWManagerServiceProcessServer struct {
	grpc.ServerStream
}

func (x *gWManagerServiceProcessServer) Send(m *ProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gWManagerServiceProcessServer) Recv() (*ProcessRequest, error) {
	m := new(ProcessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GWManagerService_ServiceDesc is the grpc.ServiceDesc for GWManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GWManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GWManagerService",
	HandlerType: (*GWManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireSession",
			Handler:    _GWManagerService_AcquireSession_Handler,
		},
		{
			MethodName: "ReleaseSession",
			Handler:    _GWManagerService_ReleaseSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _GWManagerService_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
